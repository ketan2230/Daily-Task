- Firebase Realtime Database
    The Firebase Realtime Database is a cloud-hosted database. Data is stored as JSON and synchronized in realtime to every connected client. When you build cross-platform apps with our iOS, Android, and JavaScript SDKs, all of your clients share one Realtime Database instance and automatically receive updates with the newest data.

- How does it work?
    - The Firebase Realtime Database lets you build rich, collaborative applications by allowing secure access to the database directly from client-side code. Data is persisted locally, and even while offline, realtime events continue to fire, giving the end user a responsive experience. When the device regains connection, the Realtime Database synchronizes the local data changes with the remote updates that occurred while the client was offline, merging any conflicts automatically.
    - The Realtime Database provides a flexible, expression-based rules language, called Firebase Realtime Database Security Rules, to define how your data should be structured and when data can be read from or written to. When integrated with Firebase Authentication, developers can define who has access to what data, and how they can access it.
    - The Realtime Database is a NoSQL database and as such has different optimizations and functionality compared to a relational database. The Realtime Database API is designed to only allow operations that can be executed quickly. This enables you to build a great realtime experience that can serve millions of users without compromising on responsiveness. Because of this, it is important to think about how users need to access your data and then structure it accordingly.

- Refference Videos Watch
    - https://youtu.be/U5aeM5dvUpA
    - https://youtu.be/BXHQ5NxU2p8

- Types Of Database in Firebase 
    - Cloud Firestore :- 
                            Cloud Firestore is Firebase's newest database for mobile app development. It builds on the successes of the Realtime Database with a new, more intuitive data model. Cloud Firestore also features richer, faster queries and scales further than the Realtime Database.

    - Realtime Database :-
                            Realtime Database is Firebase's original database. It's an efficient, low-latency solution for mobile apps that require synced states across clients in realtime.

- Database Offers 
    - Client-first SDKs, with no servers to deploy and maintain
    - Realtime updates
    - Free tier, then pay for what you use
    - offline
    - Accessible from Client Devices
    - Scale across multiple databases

- Pros of Firebase 
    - Database capabilities
    - Wide number of services
    - Free start
    - Concise documentation
    - Accessible UI and ease of integration
    - Static hosting capabilities

- cons of Firebase
    - Firebase Realtime Database limitations
    - Vendor lock-in
    - Less support for iOS apps
    
- Firebase alternatives
    - AWS Aurora
    - Parse servers
    - Back4App
    
- Difference Between Realtime Database and Firestore
    - Refference Video :- https://youtu.be/GMJu2aC4AhQ 
                        - https://youtu.be/KeIx-mArUck
                        - https://youtu.be/TmXct7seeBY
                    
- how we can deploy site in firebase
    - Step 1: Install the Firebase CLI
    - Step 2: Initialize your project
        - firebase login
        - firebase init hosting
        1. Select a Firebase project to connect to your local project directory.
        2. Specify a directory to use as your public root directory.
        3. Choose a configuration for your site.
    - Step 3: Deploy to your site
        - firebase deploy --only hosting

- check firebase authentication method and implement email-password authentication method
    - Types Of Authentication
        - Email and password based authentication
        - Federated identity provider integration
        - Phone number authentication
        - Custom auth system integration
        - Anonymous auth

    - How Does It Work?
        - To sign a user into your app, you first get authentication credentials from the user. These credentials can be the user's email address and password, or an OAuth token from a federated identity provider. Then, you pass these credentials to the Firebase Authentication SDK. Our backend services will then verify those credentials and return a response to the client.

        - After a successful sign in, you can access the user's basic profile information, and you can control the user's access to data stored in other Firebase products. You can also use the provided authentication token to verify the identity of users in your own backend services.

        - Note: By default, authenticated users can read and write data to the Firebase Realtime Database and Cloud Storage. You can control the access of those users by modifying your Firebase Realtime Database and Cloud Storage Security Rules.
    
    